==============================================================================================
=					Week One					     =
==============================================================================================
Know how the apropos command is useful in searching the system's online help (the word apropos can be defined as "very appropriate to a particular situation").
Know what the man command does and why it is useful
Understand what the cd command does and what the differences are in running cd (with no arguments), cd -, and cd with an arbitrary path
Understand the difference between a relative and absolute path in the linux filesystem
Understand the meanings of /, ., and .. in terms of paths
Understand what the ls command does along with it's -a, -R, and -l options
Understand what the cat and less commands do and be able to briefly explain their differences/similarities
Understand what the export and alias commands do and be able to briefly explain their differences/similarities
Understand what the pwd command does and the concept of a "working directory"
Understand what the echo command does along with it's -n option

Understand the information displayed in the default prompt on Ubuntu, for example:
	cjohnso0@bb136-11:~/linux$	
	This prompt says I have a shell running on Host ______ as User ______ and my working directory is _________?

Know that ssh allows for running a shell on a remote machine. Be able to explain, in words, what a command like this is saying:
	$ ssh cjohnso0@gc297-01.mines.edu

Know the mkdir command and it's option -p
Know the rmdir command and the constraints for it's usage
Know the rm command and it's options -r and -f

Know the find command along with it's options -type and -name
Know the cp command and it's option -r
Know the mv command and it's options -f, -n, and -i
Know the touch command

Be aware that the mount command exists
Be able to describe the purpose of the wget, tar, and scp commands

What editor keystroke deletes from the cursor position to the end of the line? Not the whole line!
What editor keystroke jumps the cursor to the beginning of a line? To the end of a line?
What editor keystroke(s) let you copy, delete, and paste a select region of lines in a file?
What editor keystroke(s) let's you save the current file buffer to disk?
What keystrokes exit your editor with saving a file?
What keystrokes exit your editor without saving the file?
What keystrokes allow you to select a region of text (multiple lines) for copying or deleting?

==============================================================================================
=					Week Two					     =
==============================================================================================
Know the wc command and its options -w and -l
Know the file command and its purpose

Know that the du, df, and stat commands exist

Know the read command and its purpose
Know the input and output redirection operators <, >, and >>
Know that /dev/null is a special file to which you redirect "garbage" output

Know the bash command along with its options -x and -e for running bash scripts

Know the special meanings of the characters/wildcards ?, *, [set], and [!set]
Know the special meanings of the $ and ~ characters

Understand quoting rules with single quotes, double quotes, and no quotes. What
does the shell do in each scenario when it sees special characters (like * or $)?

Be able to trace through simple shell scripts like the shell-dessert.sh explained in class

Your editor (vim or emacs) allows you to quickly display the contents of a man
documentation page in inside your editor. What is this magical keystroke(s) for
your editor?

For the editor of your choice, what keystroke or keystrokes auto-complete words or variable names?

==============================================================================================
=					Week Three					     =
==============================================================================================
Understand the special meaning of the $? variable. What does it mean if $? is 0 or nonzero?
Understand the difference in Ctrl-C and Ctrl-D
Know what Ctrl-L and Ctrl-Z do

Understand how to use the while-do-done structure in a bash script
Be able to explain the terminating condition of a while loop in terms of $?

Know how to reference command line arguments in bash scripts (e.g., what is $1, $2, ..., $@?)

Know how to use ps or top to find the PID of a runaway process
Know the special meaning of the $$ variable
Know how to use the kill command and its option -TERM

Know the test command and the importance of its exit status.
Be able to read the man page for test to find the options you need
Know that [] is analagous to test

Understand how to use the if-then-fi structure in a bash script
Know that the false, true, and yes commands exist

==============================================================================================
=					Week Four					     =
==============================================================================================
Understand the Bash control structure: case-in-esac; a multiway control structure similar to C/C++ switch statement.
Understand the Bash control structure: for-do-done; an iterative looping structure not like the C/C++ arithmetic loop.
How are wildcards special to the processing of for-do-done loops?
In a case-in-esac statement, how do you create a "catch-all" default matching pattern?
Know how to write a case-in-esac pattern matching "switch" statement.
Know how to write and trace a for-do-done pattern matching loop.
What special character sequence signifies the end of a pattern-match block in case-in-esac?
When multiple patterns match a case-in-esac predicate, which one is evaluated?

Understand how if and while structures in Bash depend on the exit status of command(s)
Understand how the case and for structures in Bash depend on patterns

Command: grep and its options -l, -v, -e
Command: head and its -n option; note that head -n 3 is the same as head -3
Command: tail and its -n option; note that tail -n 3 is the same as tail -3
Command: sort and its options -n, -k, and -t
Command: uniq (note the connection to sort)
Command: tr and its option -d

==============================================================================================
=					Week Five					     =
==============================================================================================
UNDERSTAND HOW PIPELINES IN *NIX WORK!!!!! For example, explain what each of the following would do:
	apropos word | grep "count"
	cat file.txt | tr '\n' ' ' | wc -l
	sort < file.txt | uniq | head -3
	sort < file.txt | uniq | head -3 | cut -c 1
	sort < file.txt | uniq | head -3 | cut -c 1 | tr 'ABC' '123'

Command: cut and its options -d, -c and -f
Command: tee and its option -a

Command: sed and its options -e, -i, and -n
Know the s(ubstitute), p(rint), and d(elete) transformations available with sed
Know how to specify a search-and-replace operation in sed (s/Harry/Sally/)
How does the g modifier affect the result of s/Harry/Sally/g?
Know how to specify line number scope in sed (5p or 1,3s/Harry/Sally/)
What does the d sed command do, as in sed 5,8d

How do you assign the output of a command or pipeline as the value of a variable?

What are the exit codes of grep and sed --- how are they dependent on the pattern argument and their input file?

Command: chmod and its option -R
Command: chown and its option -R
Know the "3x3" nature of Unix permissions --- what do the mnemonics r, w, and x mean?
What can you do to a file or directory with permissions 000?
How are permissions related to the octal (base 8) number system?
What two steps are required to turn a script (.sh file) into an application like utility?
What third step is commonly done when converting a script (.sh file) into an application like utility?
What advantage do the symbolic specifications such as -w and +x have in chmod?
Know how to tell what permissions the user, group, and others have for a particular file
Know that the sudo command exists and what it allows you to do (provided you are allowed to run the command)
